// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/adminServiceinterface.go

// Package mock is a generated GoMock package.
package mock

import (
	models "localEyes/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminServiceInterface is a mock of AdminServiceInterface interface.
type MockAdminServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceInterfaceMockRecorder
}

// MockAdminServiceInterfaceMockRecorder is the mock recorder for MockAdminServiceInterface.
type MockAdminServiceInterfaceMockRecorder struct {
	mock *MockAdminServiceInterface
}

// NewMockAdminServiceInterface creates a new mock instance.
func NewMockAdminServiceInterface(ctrl *gomock.Controller) *MockAdminServiceInterface {
	mock := &MockAdminServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAdminServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminServiceInterface) EXPECT() *MockAdminServiceInterfaceMockRecorder {
	return m.recorder
}

// DeletePost mocks base method.
func (m *MockAdminServiceInterface) DeletePost(pId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", pId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockAdminServiceInterfaceMockRecorder) DeletePost(pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockAdminServiceInterface)(nil).DeletePost), pId)
}

// DeleteQuestion mocks base method.
func (m *MockAdminServiceInterface) DeleteQuestion(qId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", qId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockAdminServiceInterfaceMockRecorder) DeleteQuestion(qId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockAdminServiceInterface)(nil).DeleteQuestion), qId)
}

// DeleteUser mocks base method.
func (m *MockAdminServiceInterface) DeleteUser(uId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", uId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAdminServiceInterfaceMockRecorder) DeleteUser(uId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAdminServiceInterface)(nil).DeleteUser), uId)
}

// GetAllPosts mocks base method.
func (m *MockAdminServiceInterface) GetAllPosts() ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockAdminServiceInterfaceMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockAdminServiceInterface)(nil).GetAllPosts))
}

// GetAllQuestions mocks base method.
func (m *MockAdminServiceInterface) GetAllQuestions() ([]*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuestions")
	ret0, _ := ret[0].([]*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuestions indicates an expected call of GetAllQuestions.
func (mr *MockAdminServiceInterfaceMockRecorder) GetAllQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuestions", reflect.TypeOf((*MockAdminServiceInterface)(nil).GetAllQuestions))
}

// GetAllUsers mocks base method.
func (m *MockAdminServiceInterface) GetAllUsers() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockAdminServiceInterfaceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockAdminServiceInterface)(nil).GetAllUsers))
}

// ReActivate mocks base method.
func (m *MockAdminServiceInterface) ReActivate(uId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReActivate", uId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReActivate indicates an expected call of ReActivate.
func (mr *MockAdminServiceInterfaceMockRecorder) ReActivate(uId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReActivate", reflect.TypeOf((*MockAdminServiceInterface)(nil).ReActivate), uId)
}
