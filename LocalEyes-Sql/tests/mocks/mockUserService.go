// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/userServiceInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	models "localEyes/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserServiceInterface is a mock of UserServiceInterface interface.
type MockUserServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceInterfaceMockRecorder
}

// MockUserServiceInterfaceMockRecorder is the mock recorder for MockUserServiceInterface.
type MockUserServiceInterfaceMockRecorder struct {
	mock *MockUserServiceInterface
}

// NewMockUserServiceInterface creates a new mock instance.
func NewMockUserServiceInterface(ctrl *gomock.Controller) *MockUserServiceInterface {
	mock := &MockUserServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUserServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceInterface) EXPECT() *MockUserServiceInterfaceMockRecorder {
	return m.recorder
}

// DeActivate mocks base method.
func (m *MockUserServiceInterface) DeActivate(uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeActivate", uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeActivate indicates an expected call of DeActivate.
func (mr *MockUserServiceInterfaceMockRecorder) DeActivate(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeActivate", reflect.TypeOf((*MockUserServiceInterface)(nil).DeActivate), uid)
}

// GetNotifications mocks base method.
func (m *MockUserServiceInterface) GetNotifications(uid string) (*[]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", uid)
	ret0, _ := ret[0].(*[]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockUserServiceInterfaceMockRecorder) GetNotifications(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockUserServiceInterface)(nil).GetNotifications), uid)
}

// GetUserById mocks base method.
func (m *MockUserServiceInterface) GetUserById(uid string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", uid)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserServiceInterfaceMockRecorder) GetUserById(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserServiceInterface)(nil).GetUserById), uid)
}

// Login mocks base method.
func (m *MockUserServiceInterface) Login(username, password string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceInterfaceMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceInterface)(nil).Login), username, password)
}

// NotifyUsers mocks base method.
func (m *MockUserServiceInterface) NotifyUsers(uid, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyUsers", uid, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyUsers indicates an expected call of NotifyUsers.
func (mr *MockUserServiceInterfaceMockRecorder) NotifyUsers(uid, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyUsers", reflect.TypeOf((*MockUserServiceInterface)(nil).NotifyUsers), uid, title)
}

// Signup mocks base method.
func (m *MockUserServiceInterface) Signup(username, password string, dwellingAge int, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", username, password, dwellingAge, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserServiceInterfaceMockRecorder) Signup(username, password, dwellingAge, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserServiceInterface)(nil).Signup), username, password, dwellingAge, tag)
}

// ValidateUsername mocks base method.
func (m *MockUserServiceInterface) ValidateUsername(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUsername", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateUsername indicates an expected call of ValidateUsername.
func (mr *MockUserServiceInterfaceMockRecorder) ValidateUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUsername", reflect.TypeOf((*MockUserServiceInterface)(nil).ValidateUsername), username)
}
