// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/questionServiceInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	models "localEyes/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionServiceInterface is a mock of QuestionServiceInterface interface.
type MockQuestionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionServiceInterfaceMockRecorder
}

// MockQuestionServiceInterfaceMockRecorder is the mock recorder for MockQuestionServiceInterface.
type MockQuestionServiceInterfaceMockRecorder struct {
	mock *MockQuestionServiceInterface
}

// NewMockQuestionServiceInterface creates a new mock instance.
func NewMockQuestionServiceInterface(ctrl *gomock.Controller) *MockQuestionServiceInterface {
	mock := &MockQuestionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockQuestionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionServiceInterface) EXPECT() *MockQuestionServiceInterfaceMockRecorder {
	return m.recorder
}

// AddAnswer mocks base method.
func (m *MockQuestionServiceInterface) AddAnswer(qId, answer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnswer", qId, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnswer indicates an expected call of AddAnswer.
func (mr *MockQuestionServiceInterfaceMockRecorder) AddAnswer(qId, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockQuestionServiceInterface)(nil).AddAnswer), qId, answer)
}

// AskQuestion mocks base method.
func (m *MockQuestionServiceInterface) AskQuestion(userId, postId, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskQuestion", userId, postId, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// AskQuestion indicates an expected call of AskQuestion.
func (mr *MockQuestionServiceInterfaceMockRecorder) AskQuestion(userId, postId, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskQuestion", reflect.TypeOf((*MockQuestionServiceInterface)(nil).AskQuestion), userId, postId, content)
}

// DeleteQuesByPId mocks base method.
func (m *MockQuestionServiceInterface) DeleteQuesByPId(postId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuesByPId", postId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuesByPId indicates an expected call of DeleteQuesByPId.
func (mr *MockQuestionServiceInterfaceMockRecorder) DeleteQuesByPId(postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuesByPId", reflect.TypeOf((*MockQuestionServiceInterface)(nil).DeleteQuesByPId), postId)
}

// DeleteUserQues mocks base method.
func (m *MockQuestionServiceInterface) DeleteUserQues(uId, qId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserQues", uId, qId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserQues indicates an expected call of DeleteUserQues.
func (mr *MockQuestionServiceInterfaceMockRecorder) DeleteUserQues(uId, qId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserQues", reflect.TypeOf((*MockQuestionServiceInterface)(nil).DeleteUserQues), uId, qId)
}

// GetPostQuestions mocks base method.
func (m *MockQuestionServiceInterface) GetPostQuestions(pId string) ([]*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostQuestions", pId)
	ret0, _ := ret[0].([]*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostQuestions indicates an expected call of GetPostQuestions.
func (mr *MockQuestionServiceInterfaceMockRecorder) GetPostQuestions(pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostQuestions", reflect.TypeOf((*MockQuestionServiceInterface)(nil).GetPostQuestions), pId)
}
