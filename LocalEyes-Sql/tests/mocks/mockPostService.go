// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/postServiceInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	models "localEyes/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostServiceInterface is a mock of PostServiceInterface interface.
type MockPostServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceInterfaceMockRecorder
}

// MockPostServiceInterfaceMockRecorder is the mock recorder for MockPostServiceInterface.
type MockPostServiceInterfaceMockRecorder struct {
	mock *MockPostServiceInterface
}

// NewMockPostServiceInterface creates a new mock instance.
func NewMockPostServiceInterface(ctrl *gomock.Controller) *MockPostServiceInterface {
	mock := &MockPostServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPostServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceInterface) EXPECT() *MockPostServiceInterfaceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostServiceInterface) CreatePost(userId, title, content, postType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", userId, title, content, postType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostServiceInterfaceMockRecorder) CreatePost(userId, title, content, postType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostServiceInterface)(nil).CreatePost), userId, title, content, postType)
}

// DeleteMyPost mocks base method.
func (m *MockPostServiceInterface) DeleteMyPost(uId, pId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMyPost", uId, pId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMyPost indicates an expected call of DeleteMyPost.
func (mr *MockPostServiceInterfaceMockRecorder) DeleteMyPost(uId, pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMyPost", reflect.TypeOf((*MockPostServiceInterface)(nil).DeleteMyPost), uId, pId)
}

// GiveAllPosts mocks base method.
func (m *MockPostServiceInterface) GiveAllPosts() ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveAllPosts")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GiveAllPosts indicates an expected call of GiveAllPosts.
func (mr *MockPostServiceInterfaceMockRecorder) GiveAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveAllPosts", reflect.TypeOf((*MockPostServiceInterface)(nil).GiveAllPosts))
}

// GiveFilteredPosts mocks base method.
func (m *MockPostServiceInterface) GiveFilteredPosts(filterType string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveFilteredPosts", filterType)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GiveFilteredPosts indicates an expected call of GiveFilteredPosts.
func (mr *MockPostServiceInterfaceMockRecorder) GiveFilteredPosts(filterType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveFilteredPosts", reflect.TypeOf((*MockPostServiceInterface)(nil).GiveFilteredPosts), filterType)
}

// GiveMyPosts mocks base method.
func (m *MockPostServiceInterface) GiveMyPosts(uId string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveMyPosts", uId)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GiveMyPosts indicates an expected call of GiveMyPosts.
func (mr *MockPostServiceInterfaceMockRecorder) GiveMyPosts(uId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveMyPosts", reflect.TypeOf((*MockPostServiceInterface)(nil).GiveMyPosts), uId)
}

// GivePostById mocks base method.
func (m *MockPostServiceInterface) GivePostById(pId string) (*models.PostWithQuestions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GivePostById", pId)
	ret0, _ := ret[0].(*models.PostWithQuestions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GivePostById indicates an expected call of GivePostById.
func (mr *MockPostServiceInterfaceMockRecorder) GivePostById(pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GivePostById", reflect.TypeOf((*MockPostServiceInterface)(nil).GivePostById), pId)
}

// Like mocks base method.
func (m *MockPostServiceInterface) Like(pId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", pId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockPostServiceInterfaceMockRecorder) Like(pId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockPostServiceInterface)(nil).Like), pId)
}

// UpdateMyPost mocks base method.
func (m *MockPostServiceInterface) UpdateMyPost(postId, userId, title, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMyPost", postId, userId, title, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMyPost indicates an expected call of UpdateMyPost.
func (mr *MockPostServiceInterfaceMockRecorder) UpdateMyPost(postId, userId, title, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyPost", reflect.TypeOf((*MockPostServiceInterface)(nil).UpdateMyPost), postId, userId, title, content)
}
